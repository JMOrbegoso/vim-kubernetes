snippet deploy "Deployment" !bm
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:some-controller}
  namespace: ${2:default}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $1
    spec:
      containers:
      - name: ${4:name}
        image: ${5:nginx}
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        ports:
        - containerPort: 8080
---

endsnippet

snippet svc "Service" !b
apiVersion: v1
kind: Service
metadata:
  name: ${1:frontend}
  namespace: ${2:default}
spec:
  type: ${5:ClusterIP}${6:NodePort}${7:LoadBalancer}${8:ExternalName}
  ${9:clusterIP: None # can be auto generated, none=headless
  }${10:externalName: vim.com
  }selector: # not used in type externalName
    app.kubernetes.io/name: ${11:busybox}
  ports:
  - port: ${12:80 # service port}
    targetPort: ${13: # container port}
    ${14:nodePort: 30007
}---

endsnippet

snippet pv "PersistentVolume" !b
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${1:name}
  labels:
    app.kubernetes.io/name: ${2:app}
spec:
  capacity:
    storage: ${4:20Gi}
  accessModes:
    - ${5:ReadWriteMany}
  nfs:
    server: ${6:NameOrIP}
    path: ${7:"/share/path/on/server"}
---

endsnippet

snippet pvc "PersistentVolumeClaim" !b
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${1:name}
  labels:
    app.kubernetes.io/name: ${2:app}
spec:
  ${4:storageClassName: ${5:standard}}
  accessModes:
    - ${6:ReadWriteOnce}
  resources:
    requests:
      # The amount of the volume's storage to request
      storage: ${7:20Gi}
---

endsnippet

snippet ing "Ingress" !b
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${1:name}
  namespace: ${2:default}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  ingressClassName: nginx
  ${6:tls:
  - secretName: ${7:tls-secret}
    hosts:
    - $8
  }rules:
  - host: ${8:host.com}
    http:
      paths:
      - path: ${9:/}
        pathType: Prefix
        backend:
          service:
            name: ${10:service}
            port:
              number: ${11:8080 # same as Service.spec.ports[x].port}
---

endsnippet

snippet ns "Namespace" !b
apiVersion: v1
kind: Namespace
metadata:
  name: ${1:name}
---

endsnippet

snippet cm "ConfigMap" !b
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:name}
  namespace: ${2:default}
${3:data:
  key: value # --from-literal
  file.json: | # --from-file
    {
    "array": [1,2,3]
    }
}${4:binaryData:
  trustore.jks: |-
    binary data in base64
}---

endsnippet

snippet sec "Secret" !b
apiVersion: v1
kind: Secret
metadata:
  name: ${1:secret-name}
  namespace: ${2:default}
${3:type: Opaque
data:
  key: value
}${4:type: kubernetes.io/tls
data:
  tls.crt: base64 encoded cert
  tls.key: base64 encoded key
}${5:type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: top-Secret
}${6:type: kubernetes.io/ssh-auth
data:
  ssh-privatekey: |
    MIIEpQIBAAKCAQEAulqb/Y
}---

endsnippet

snippet job "Kubernetes Job" !b
apiVersion: batch/v1
kind: Job
metadata:
  name: ${1:jobname}
  namespace: ${2:namespace}
spec:
  backoffLimit: ${3:6 # number of retries before marking this job failed}
  ${4:ttlSecondsAfterFinished: 1 # seconds to delete job after finish
  }template:
    metadata:
      name: $1
    spec:
      restartPolicy: ${5:OnFailure|Never}
      containers:
      - name: ${6:containerName}
        image: ${7: image}
        imagePullPolicy: Always
        command:
        - ${8:"override"
        - "--the"
        - "entrypoint"}
---

endsnippet

snippet cron "Kubernetes Cronjob" !b
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ${1:name}
  namespace: ${2:namespace}
spec:
  schedule: "${3:* * * * *}"
  jobTemplate:
    spec:
      backoffLimit: ${4:6 # number of retries before marking this job failed}
      ${5:ttlSecondsAfterFinished: 1 # seconds to delete job after finish
      }template:
        metadata:
          name: $1
        spec:
          restartPolicy: ${6:OnFailure|Never}
          containers:
          - name: ${7:containerName}
            image: ${8: image}
            imagePullPolicy: Always
            command:
            - ${9:"override"
            - "--the"
            - "entrypoint"}
---

endsnippet

snippet cert "cert-manager certificate" !b
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ${1:name}
  namespace: ${2:namespace}
spec:
  secretName: ${4:$3.tls}
  isCA: false
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  # subject:
  #   organizations:
  #   - cluster.local
  dnsNames:
  - ${3:some.domain.com}
  issuerRef:
    name: ${5:letsencrypt}
    kind: ${6:ClusterIssuer}
---

endsnippet

snippet netp "NetworkPolicy" !b
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: ${1:ns}
  name: ${2:mypolicy}
spec:
  podSelector:
    matchLabels:
      ${3:app}: ${4:loki}
  ingress:
    - namespaceSelector:
        matchLabels:
          ${5:$4}: ${6:"true"}
---

endsnippet

snippet ss "StatefulSet" !b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:mystatefulset}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: $1
  serviceName: "nginx"
  replicas: 3 # by default is 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $1
    spec:
      # terminationGracePeriodSeconds: 10
      containers:
      - name: ${3:$1}
        image: ${4:$1}
        ports:
        - containerPort: ${5:80}
          name: ${6:web}
        volumeMounts:
        - name: ${7:volume}
          mountPath: ${8:/var/lib/mydata}
  volumeClaimTemplates:
  - metadata:
      name: $7
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "${9:standard}"
      resources:
        requests:
          storage: ${10:1G}
---

endsnippet

snippet sa "ServiceAccount" !b
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${1:jane}
  namespace: ${2:default}
---

endsnippet

snippet role "Role" !b
kind: ${1:Cluster}Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${4:configmap-updater}
  ${2:namespace: ${3:default}}
rules:
- apiGroups: [""] # Empty means that everything is allowed
  resources: ["${5:configmaps}"]
  ${6:resourceNames: ["${7:my-configmap}"]
  }verbs: [${8:"get", }${9:"list", }${10:"create", }${11:"update", }${12:"patch", }${13:"watch", }${14:"delete", }${15:"deletecollection"}]
---

endsnippet

snippet rb "RoleBinding" !b
# Test: k auth -n default --as system:serviceaccount:default:jane can-i create pods
kind: ${1:Cluster}RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${4:read-pods}
  ${2:namespace: ${3:pods}}
subjects:
- kind: ${5:User|ServiceAccount|Group}
  name: ${6:jane}
  apiGroup: ""
  namespace: ${7:default}
roleRef:
  kind: ${8:Cluster}Role
  name: ${9:pod-reader}
  apiGroup: rbac.authorization.k8s.io
---

endsnippet

snippet hpa1 "HorizontalPodAutoscaler v1" !b
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: $1
  namespace: ${2:default}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${1:deployment-name}
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 50
---

endsnippet

snippet hpa2beta1 "HorizontalPodAutoscaler v2beta1" !b
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: $1
  namespace: ${2:default}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${1:deployment-name}
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 10
  - type: Resource
    resource:
    name: memory
      targetAverageValue: 1000Mi
---

endsnippet

snippet hpa2beta2 "HorizontalPodAutoscaler v2beta2" !b
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: $1
  namespace: ${2:default}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${1:deployment-name}
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 10
  - type: Resource
    resource:
    name: memory
      targetAverageValue: 1000Mi
---

endsnippet

snippet hpa2 "HorizontalPodAutoscaler v2" !b
# Available since v1.23
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: $1
  namespace: ${2:default}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${1:deployment-name}
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 1000Mi
---

endsnippet

snippet ds "DaemonSet" !b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:name}
  namespace: ${2:default}
  labels:
    app.kubernetes.io/name: $1
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: $1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $1
    spec:
      containers:
      - name: $1
        image: ${3:image/name}
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
$0
---

endsnippet

snippet pdt "Pod Template" !b
metadata:
  labels:
    app.kubernetes.io/name: busybox
spec:
  restartPolicy: Always
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  containers:
  - name: busybox
    image: busybox:1.28
    imagePullPolicy: Always
    command: ["/bin/echo"]
    args: ["$(SPECIAL_LEVEL_KEY)"]
    ports:
    - containerPort: 80
    - name: liveness-port
      containerPort: 8080
      hostPort: 8080
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 500Mi
    startupProbe:
      httpGet:
        path: /healthz
        port: liveness-port
      failureThreshold: 30
      periodSeconds: 10
    readinessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/healthy
      initialDelaySeconds: 5
      periodSeconds: 5
    envFrom:
    - configMapRef:
      # Define all of the ConfigMap's data as container environment variables, the key from the ConfigMap becomes the environment variable name in the Pod
      name: helper-config
    env:
    - name: ENV_USERNAME
      value: guest
    - name: SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mysecret
          key: password
          optional: false
    - name: SPECIAL_LEVEL_KEY
      valueFrom:
        configMapKeyRef:
          name: special-config
          key: SPECIAL_LEVEL
          optional: true
    volumeMounts:
    - name: foo-config-volume
      mountPath: /etc/config/foo
    - name: bar-config-volume
      mountPath: /etc/config/bar # ConfigMap available at /etc/config/bar/logs/log_level
    - name: foo-secret-volume
      mountPath: "/etc/secret/foo"
      readOnly: true
    - name: bar-secret-volume
      mountPath: "/etc/secret/bar" # Secret available at /etc/secret/bar/my-group/my-username
      readOnly: true
    - name: redis-storage
      mountPath: /data/redis
    - name: test-volume
      mountPath: /test-pd
  volumes:
  - name: foo-config-volume
    configMap:
      name: foo-config
  - name: bar-config-volume
    configMap:
      name: bar-config
      items:
        - key: LOG_LEVEL
          path: logs/log_level
  - name: foo-secret-volume
    secret:
      secretName: foo-secret
      optional: false
  - name: bar-secret-volume
    secret:
      secretName: bar-secret
      items:
      - key: username
        path: my-group/my-username
  - name: redis-storage
    emptyDir: {}
  - name: test-volume
    hostPath:
      path: /data # Location on host
      type: Directory # https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
endsnippet
