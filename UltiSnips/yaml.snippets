snippet rc "Replication Controller" !b
# WARNING, use Deployments -- ReplicationController is being replaced.
apiVersion: v1
kind: ReplicationController
metadata:
	name: ${1:some-controller}
spec:
	replicas: 1
	template:
		metadata:
			labels:
				app: $1
				tier: $2
		spec:
			containers:
			- name: ${3:name}
				image: ${4:nginx}
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: 8080
endsnippet

snippet dep "Deployment" !b
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
	name: ${1:some-controller}
spec:
	replicas: 1
	template:
		metadata:
			labels:
				app: $1
				tier: ${2:frontend}
		spec:
			containers:
			- name: ${3:name}
				image: ${4:nginx}
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: 8080
endsnippet

snippet svc "Service" !b
apiVersion: v1
kind: Service
metadata:
	name: ${1:frontend}
	labels:
		app: ${2:someApp}
		tier: ${3:frontend}
spec:
	ports:
	- port: ${4:80}
	selector:
		app: $2
		tier: $3
endsnippet

snippet depsvc "Deployment and service" !b
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
	name: ${1:some-controller}
spec:
	replicas: 1
	template:
		metadata:
			labels:
				app: $1
				tier: ${2:frontend}
		spec:
			containers:
			- name: ${3:name}
				image: ${4:nginx}
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: ${5:8080}
---
apiVersion: v1
kind: Service
metadata:
	name: $1
spec:
	ports:
	- port: ${6:80}
		targetPort: $5
	selector:
		app: $1
		tier: $2
endsnippet

snippet depsvcing "Deployment, service, and ingress" !b
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
	name: ${1:some-controller}
spec:
	replicas: 1
	template:
		metadata:
			labels:
				app: $1
				tier: ${2:frontend}
		spec:
			containers:
			- name: ${3:name}
				image: ${4:nginx}
				resources:
					requests:
						cpu: 100m
						memory: 200Mi
				ports:
				- containerPort: ${5:8080}
---
apiVersion: v1
kind: Service
metadata:
	name: $1
spec:
	ports:
	- port: ${6:80}
		targetPort: $5
	selector:
		app: $1
		tier: $2
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
	name: $1
spec:
	${9:tls:
	- secretName: ${7:tlssecret}
		hosts:
		- ${8:host}}
	rules:
	- host: $8
		http:
			paths:
			- path: ${10:/}
				backend:
					serviceName: $1
					servicePort: $6
endsnippet

snippet pv "PersistentVolume" !b
apiVersion: v1
kind: PersistentVolume
metadata:
	name: ${1:name}
	labels:
		app: ${2:app}
		tier: ${3:tier}
spec:
	capacity:
		storage: ${4:20Gi}
	accessModes:
		- ${5:ReadWriteMany}
	nfs:
		server: ${6:NameOrIP}
		path: ${7:"/share/path/on/server"}
endsnippet

snippet pvc "PersistentVolumeClaim" !b
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
	name: ${1:name}
	labels:
		# insert any desired labels to identify your claim
		app: ${2:app}
		tier: ${3:tier}
spec:
	# The metadata.name field from the PersistentVolume to match
	volumeName: ${4:volumeName}
	accessModes:
		- ${5:ReadWriteMany}
	resources:
		requests:
			# The amount of the volume's storage to request
			storage: ${6:20Gi}
endsnippet

snippet ing "Ingress" !b
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
	name: ${1:name}
spec:
	rules:
	- host: ${2:host}
		http:
			paths:
			- path: ${3:/}
				backend:
					serviceName: ${4:service}
					servicePort: ${5:portNumberOrName}
endsnippet

snippet ns "Namespace" !b
apiVersion: v1
kind: Namespace
metadata:
	name: ${1:name}
endsnippet

snippet sa "ServiceAccount" !b
apiVersion: v1
kind: ServiceAccount
metadata:
	name: ${1:name}
endsnippet
